  var onRun = function(context) {
    log('Translate text layers or texts on page');

    var documentName   = context.document.displayName();
    var selectedLayers = context.selection;
    var selectedCount  = selectedLayers.count();
    var strAPIKey = "trnsl.1.1.20160312T022550Z.16d24de7fc1279c9.d9f8493a4ef038d1fb3cd6af6f8187f5c0a35c00" //should input in first

    //call choice panel
    var options   = ['Thailand', 'Vietnam'];
    var choice    = offerLocale('Pseudolocalize to', options, 0);

    //show pseudolocalization choice.
    switch (choice[1]) {
      case 0: // Thailand
        // if not cancelled
        if (choice[0] == "1000"){
          context.document.showMessage("Translating from EN to TH");
          main("th");
        }
        break;
      case 1: // Vietnam
        // if not cancelled
        if (choice[0] == "1000"){
          context.document.showMessage("Translating from EN to VI");
          main("vn");
        }
        break;
      default:
        log("");
    }

    //core function
    function main(selectedLocale){
      // check if there is no layer selected
      if (selectedCount == 0) {
          log('No layers are selected.');
          // duplicate page for non-destructive changes
          duplicatePageForLocale("["+selectedLocale+"]");
          // proceed with selecting text layers in whole page
          context.document.showMessage("Translate all text in this page")
          log(context.document.currentPage());
          log(context.document.currentPage().layers());
          //creating object for JSON
          var localeObject = {};

          // collecting all text layers
          var layers = context.document.currentPage().children();
          log(layers);
          var layersCount = layers.count();
          for (var i = 0; i < layersCount; i++) {
              var layer = layers[i];
              //change string only for unlocked text layer
              if (layer.isKindOfClass(MSTextLayer) && !layer.isLocked()) {
                  var newtext = textTranslate(layer.stringValue(), selectedLocale, strAPIKey);
                  //add to json object
                  localeObject[layer.stringValue()] = newtext;
                  //set new value
                  layer.setStringValue(newtext);
                  //locale string from text layers
                  //resize text layer fit its content
                  [layer adjustFrameToFit];
                  //refresh view
                  var view = context.document.currentView()
                  view.refresh;
              }
          }
          var localeJsonString = JSON.stringify(localeObject, undefined, 2);
          log("JSON file:");
          log(localeJsonString);
          //copy to clipboard
          var clipboard = NSPasteboard.generalPasteboard();
          clipboard.declareTypes_owner([NSPasteboardTypeString], null);
          clipboard.setString_forType(localeJsonString , NSPasteboardTypeString);
          context.document.showMessage('The translation file has been copied to your clipboard');
      }
      else {
        log('Selected layers:');
        log(selectedLayers);
        for (var i = 0; i < selectedCount; i++) {
          var layer = selectedLayers[i];
          //change string only for unlocked text layer
          if (layer.isKindOfClass(MSTextLayer) && !layer.isLocked()) {
            replaceString(layer, selectedLayers, i, selectedLocale);
          }

          //if layer is artboard, duplicate all text layers inside it
          else if (layer.isKindOfClass(MSArtboardGroup)) {
            log("layer" +i+ "is artboard");
            var selectedArtboardCount = layer.children().count()
            var selectedArtboardLayers = layer.children()
            log(selectedArtboardLayers);
            for (var j = 0; j < selectedArtboardCount; j++) {
              var artboardLayer = selectedArtboardLayers[j];
              if (artboardLayer.isKindOfClass(MSTextLayer) && !artboardLayer.isLocked()) {
                replaceString(artboardLayer, selectedArtboardLayers, j, selectedLocale);
              }
            }
          }
        }
      }
    }

      //function to replace text layer with new string
    function replaceString(textLayer, selectedTextLayer, i, selectedLocale){
      //hide original text
      selectedTextLayer[i].setIsVisible(false);
      //duplicate text layer for non-destructive editing
      textLayer = selectedTextLayer[i].duplicate();
      //show duplicate text
      textLayer.setIsVisible(true);
      //rename text layer according to its locale
      textLayer.setName(selectedTextLayer[i].name() + "-["+selectedLocale+"]");
      var newtext = textTranslate(textLayer.stringValue(), selectedLocale, strAPIKey);
      //set new value
      textLayer.setStringValue(newtext);
      //resize text layer fit its content
      [textLayer adjustFrameToFit];
    }
  
    //function to expand text by ratio
    function textTranslate(strToTranslate, localeName, YndxAPIKey){
      var newStr;
      // var yndxTranslate = new XMLHttpRequest();
      var yndxTranslate;
      var strURL = "https://translate.yandex.net/api/v1.5/tr.json/translate?"
      var strAPIKey = "key="+YndxAPIKey;
      //loop all the text
      var strTextToTranslate = "&text="+strToTranslate
      var langOrigin = "en";
      var lang = "&lang="+langOrigin+"-"+localeName
      var format = "&[format=plain]"
      strURL=strURL+strAPIKey+strTextToTranslate+lang+format;
      // yndxTranslate.open("GET", strURL, false);
      yndxTranslate = request(strURL)
      // yndxTranslate.open("GET", strURL, false);
      // yndxTranslate.send();

      log(strURL);
      log(yndxTranslate);
      log(yndxTranslate.statusText);
      log(yndxTranslate.responseText);
      log(JSON.parse(yndxTranslate).text)
      return null
    }
    //function for showing options for pseudolocalization
    function offerLocale(msg, items, selectedItemIndex) {
        selectedItemIndex = selectedItemIndex || 0
        var accessory = NSComboBox.alloc().initWithFrame(NSMakeRect(0, 0, 200, 25))
        accessory.addItemsWithObjectValues(items)
        accessory.selectItemAtIndex(selectedItemIndex)
        var alert = NSAlert.alloc().init()
        alert.setMessageText(msg)
        alert.addButtonWithTitle('Pseudolocalize')
        alert.addButtonWithTitle('Cancel')
        alert.setAccessoryView(accessory)
        var responseCode = alert.runModal()
        var sel = accessory.indexOfSelectedItem()
        return [responseCode, sel]
    }

    //function duplicate current page
    function duplicatePageForLocale(localeName) {

      var doc = context.document
      var page = doc.currentPage()
      var newPage = [page copy]
      newPage.pageDelegate = page.pageDelegate();
      newPage.setName(page.name() + " " + localeName);
      
      [[doc documentData] addPage:newPage];
      [doc setCurrentPage:newPage];
    }
   function request(queryURL) {
      var request = NSMutableURLRequest.new();
      [request setHTTPMethod:@"GET"];
      [request setURL:[NSURL URLWithString:queryURL]];

      var error = NSError.new();
      var responseCode = null;

      var oResponseData = [NSURLConnection sendSynchronousRequest:request returningResponse:responseCode error:error];

      var dataString = [[NSString alloc] initWithData:oResponseData encoding:NSUTF8StringEncoding];

      return dataString;
    }
    //refresh view
    var view = context.document.currentView()
    view.refresh;
};
